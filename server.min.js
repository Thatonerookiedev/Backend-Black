const express=require("express"),app=express();app.use(express.json());const mongoose=require("mongoose"),cookieParser=require("cookie-parser"),jwt=require("jsonwebtoken"),cookie=require("cookie");let productsPag=require("./arrays/products");const ProductDb=require("./models/products"),serve=require("express-static"),User=require("./models/User"),cors=require("cors");app.use(cors({origin:!0,credentials:!0})),mongoose.connect("mongodb+srv://dbUser:TORi5576@cluster0.vdvef9d.mongodb.net/test").then(()=>{console.log("i think mongoose is connected")});const maxAge=172800,createToken=id=>jwt.sign({id:id},"user basic",{expiresIn:172800});app.post("/Signup",async(req,res)=>{const email=req.body.email,password=req.body.password;try{const createdUser=await User.create({email:email,password:password}),token=createToken(createdUser._id);res.header("Access-Control-Allow-Credentials",!0),res.cookie("jwt",token,{sameSite:"none",secure:!0,httpOnly:!0,maxAge:1728e5,expires:7}),console.log(createdUser),res.status(200).json({status:"success",data:createdUser,token:token})}catch(error){console.log(error.message),res.send(error)}}),app.post("/Login",async(req,res)=>{const email=req.body.email,password=req.body.password;try{const user=await User.login(email,password),token=createToken(user._id);res.header("Access-Control-Allow-Credentials",!0),res.cookie("jwt",token,{sameSite:"none",secure:!0,httpOnly:!0,maxAge:1728e5,expires:7}),res.status(200).json({status:"success",data:{user:user,token:token,token1:token,AdminAccsess:user.AdiminPerms}})}catch(error){console.log("getting called catch",error),res.json(error)}}),app.post("/Test",async(req,res)=>{const token=req.body.jwt;if(token){let VerifiedUser,id=jwt.verify(token,"user basic").id;console.log(id);let user=await User.findById(id);console.log(user),res.status(200).json({status:"success",user:user})}else res.status(400).json({error:"error",User:null})}),app.post("/Make-Admin",async(req,res)=>{const email=req.body.email,password=req.body.password;try{const createdUserAdmin=await User.create({email:email,password:password,AdiminPerms:!0}),token=createToken(createdUserAdmin._id);res.header("Access-Control-Allow-Credentials",!0),res.cookie("jwt",token,{sameSite:"none",secure:!0,httpOnly:!0,maxAge:1728e5,expires:7}),res.status(200).json({status:"success",data:createdUserAdmin,token:token})}catch(error){console.log(error.message),res.send(error)}}),app.post("/Products",async(req,res)=>{const page=req.query.page;try{const limit=9,startIndex=(page-1)*limit,endIndex=page*limit,products=await ProductDb.find({}).sort({id:1}),PagedProduct=products.slice(startIndex,endIndex),ButtonIndex=Math.ceil(productsPag.length/limit);res.status(200).json({PagedProduct:PagedProduct,Buttons:ButtonIndex})}catch(error){res.send("soory there was an error bro")}}),app.post("/populateDB",async(req,res)=>{try{console.log("worked");const products=await ProductDb.create(productsPag);res.status(200).json({products:products,message:"hi"})}catch(error){res.status(400).json(error),res.send(error)}}),app.post("/addProducts",async(req,res)=>{const id=req.body.id,name=req.body.name;try{const createdUser=await ProductDb.create({id:id,name:name});res.status(200).json({createdUser:createdUser,message:"it was sucessful",status:"sucess"})}catch(error){res.status(400).send(error),console.log(error.message)}}),app.post("/deleteProducts",async(req,res)=>{const id=req.body.id;try{const deleteThisUser=await ProductDb.find({id:id}),findUserId=await ProductDb.findById(deleteThisUser),deletedUsercurrent=await ProductDb.deleteOne(findUserId);res.status(200).json({message:"this product is deleted",status:"sucess"})}catch(error){res.status(400).send(error.message),console.log(error.message)}}),app.get("/checkProductsAll",async(req,res)=>{const productsTestCheck=await ProductDb.find({});res.status(200).send({Products:productsTestCheck,Lenght:productsTestCheck.length})}),app.post("/checkprodctsbyId",async(req,res)=>{const id=req.body.id;try{const ProductSpecific=await ProductDb.find({id:id});res.status(200).send({Product:ProductSpecific})}catch(error){res.status(400).json({error:error.message,testMessage:"it gave error"}),console.log(error.message)}}),app.get("/",(req,res)=>{res.send("hi")}),app.listen(5e3,()=>{console.log("server running")});